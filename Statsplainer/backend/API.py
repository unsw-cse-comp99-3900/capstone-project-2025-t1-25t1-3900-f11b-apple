from openai import OpenAI
import base64

ai_model = "google/gemini-flash-1.5-8b"

#------------------------------------------------------------------------------------
#                   SETTING UP API CLIENT/KEY
#------------------------------------------------------------------------------------

with open('key.txt','r') as file:
    global key
    key = " ".join(line.rstrip() for line in file)
    
client = OpenAI(
  base_url="https://openrouter.ai/api/v1",
  api_key=key,
) 

#------------------------------------------------------------------------------------
#                   STATSPLAINER FEATURE IMPLEMENTATIONS
#------------------------------------------------------------------------------------

# Gives a response to a user's question/query.
def user_query(query):
  completion = client.chat.completions.create(
    model=ai_model,
    messages=[
      {
        "role": "user",
        "content": query
      }
    ]
  )
  print(completion.choices[0].message.content)
  return completion.choices[0].message.content

# Gives a brief summary of text provided by user
def text_explanation(subject):
    return API_text_input(subject, "Give an explanation of the text provided by the user.")

# Gives a brief summary of image provided by user
#def image_explanation(subject):
#    return API_image_input(subject, "Give an explanation of the image provided by the user.")

# Gives a eli5 explanation of text provided by user
def text_eli5(subject):
    return API_text_input(subject, "Explain the text provided by the user in a way that a five-year old can understand.")

# Gives a eli5 explanation of image provided by user 
#def image_eli5(subject):
#    return API_image_input(subject, "Explain the image provided by the user in a way that a five-year old can understand.")
 
# Gives a real world analogy of concepts in text provided by user
def text_real_world_analogy(subject):
  return API_text_input(subject, "Give a real world analogy of the concepts in the text provided by the user.")
  
# Gives a real world analogy of concepts in image provided by user
#def image_real_world_analogy(subject):
#  return API_image_input(subject, "Give a real world analogy of the concepts in the image provided by the user.")

#------------------------------------------------------------------------------------
#                   API WRAPPERS
#------------------------------------------------------------------------------------

def API_text_input(text, dev_msg, image_base64=None):
  """
  Returns generated text from LLM with text argument
  Arguments:
    text - a section of text, must be a string
    prompt - developer message to LLM, must be a string
  Return:
    string representing the explanation
  """

  if image_base64:
    msg=[
      {
        "role": "developer",
        "content": dev_msg
      },
      {
        "role": "user",
        "content": [
          {
            "type": "image_url",
            "image_url": {
                "url": f"data:image/jpeg;base64,{image_base64}",
            },
          },
        ]
      }
    ]
    
  else:
    msg=[
      {
        "role": "developer",
        "content": dev_msg
      },
      {
        "role": "user",
        "content": text
      }
    ]

  completion = client.chat.completions.create(
    model=ai_model,
    messages=msg
  )
  return completion.choices[0].message.content

'''
def API_image_input(image_path, dev_msg):
  """
  Returns generated text from LLM with image argument
  Arguments:
    image - a url to an image, must be a string
    prompt - developer message to LLM, must be a string
  Return:
    string representing text generated by LLM
  """
  with open(image_path, "rb") as image_file:
    base64_image = base64.b64encode(image_file.read()).decode("utf-8")
  
  completion = client.chat.completions.create(
    model=ai_model,
    messages=[
      {
        "role": "developer",
        "content": dev_msg
      },
      {
        "role": "user",
        "content": [
          {
            "type": "image_url",
            "image_url": {
                "url": f"data:image/jpeg;base64,{base64_image}",
            },
          },
        ]
      }
    ]
  )
  return completion.choices[0].message.content
'''





